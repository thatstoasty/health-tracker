// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: workout.sql

package models

import (
	"context"
	"time"
)

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM tracker.workout
WHERE NAME = $1
`

func (q *Queries) DeleteWorkout(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, name)
	return err
}

const deleteWorkoutPerformed = `-- name: DeleteWorkoutPerformed :exec
DELETE FROM tracker.workout_performed
WHERE SUBMITTED_ON = $1
`

func (q *Queries) DeleteWorkoutPerformed(ctx context.Context, submittedOn time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutPerformed, submittedOn)
	return err
}

const getWorkout = `-- name: GetWorkout :one
SELECT name, program_name, cret_ts, updt_ts FROM tracker.workout
WHERE NAME = $1 LIMIT 1
`

func (q *Queries) GetWorkout(ctx context.Context, name string) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, getWorkout, name)
	var i TrackerWorkout
	err := row.Scan(
		&i.Name,
		&i.ProgramName,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const getWorkoutNames = `-- name: GetWorkoutNames :many
SELECT NAME FROM tracker.workout
LIMIT $1
`

func (q *Queries) GetWorkoutNames(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutNames, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutPerformed = `-- name: GetWorkoutPerformed :one
SELECT id, submitted_on, workout_name, cret_ts, updt_ts FROM tracker.workout_performed
WHERE SUBMITTED_ON = $1 LIMIT 1
`

func (q *Queries) GetWorkoutPerformed(ctx context.Context, submittedOn time.Time) (TrackerWorkoutPerformed, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutPerformed, submittedOn)
	var i TrackerWorkoutPerformed
	err := row.Scan(
		&i.ID,
		&i.SubmittedOn,
		&i.WorkoutName,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const submitWorkout = `-- name: SubmitWorkout :one
INSERT INTO tracker.workout (
  NAME, PROGRAM_NAME
) VALUES (
  $1, $2
)
RETURNING name, program_name, cret_ts, updt_ts
`

type SubmitWorkoutParams struct {
	Name        string `json:"name"`
	ProgramName string `json:"programName"`
}

func (q *Queries) SubmitWorkout(ctx context.Context, arg SubmitWorkoutParams) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, submitWorkout, arg.Name, arg.ProgramName)
	var i TrackerWorkout
	err := row.Scan(
		&i.Name,
		&i.ProgramName,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const submitWorkoutDetails = `-- name: SubmitWorkoutDetails :one
INSERT INTO tracker.workout_details (
  WORKOUT_NAME, GROUP_ID, EXERCISE_NAME, SETS, REPS, WEIGHT
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING workout_name, group_id, exercise_name, sets, reps, weight, cret_ts, updt_ts
`

type SubmitWorkoutDetailsParams struct {
	WorkoutName  string `json:"workoutName"`
	GroupID      int16  `json:"groupID"`
	ExerciseName string `json:"exerciseName"`
	Sets         int16  `json:"sets"`
	Reps         int16  `json:"reps"`
	Weight       int16  `json:"weight"`
}

func (q *Queries) SubmitWorkoutDetails(ctx context.Context, arg SubmitWorkoutDetailsParams) (TrackerWorkoutDetail, error) {
	row := q.db.QueryRowContext(ctx, submitWorkoutDetails,
		arg.WorkoutName,
		arg.GroupID,
		arg.ExerciseName,
		arg.Sets,
		arg.Reps,
		arg.Weight,
	)
	var i TrackerWorkoutDetail
	err := row.Scan(
		&i.WorkoutName,
		&i.GroupID,
		&i.ExerciseName,
		&i.Sets,
		&i.Reps,
		&i.Weight,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}
