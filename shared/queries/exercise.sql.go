// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: exercise.sql

package queries

import (
	"context"
)

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM tracker.exercise
WHERE NAME = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, name)
	return err
}

const getExercise = `-- name: GetExercise :many
SELECT a.name, b.body_part, b.level FROM tracker.exercise a
JOIN tracker.exercise_details b
ON a.name = b.exercise_name
WHERE NAME = $1 LIMIT 1
`

type GetExerciseRow struct {
	Name     string `json:"name"`
	BodyPart string `json:"bodyPart"`
	Level    string `json:"level"`
}

func (q *Queries) GetExercise(ctx context.Context, name string) ([]GetExerciseRow, error) {
	rows, err := q.db.QueryContext(ctx, getExercise, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExerciseRow
	for rows.Next() {
		var i GetExerciseRow
		if err := rows.Scan(&i.Name, &i.BodyPart, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExercises = `-- name: GetExercises :many
SELECT name FROM tracker.exercise
LIMIT $1
`

func (q *Queries) GetExercises(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getExercises, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
