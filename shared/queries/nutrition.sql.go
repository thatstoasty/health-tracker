// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: nutrition.sql

package queries

import (
	"context"
	"database/sql"
)

const deleteNutrition = `-- name: DeleteNutrition :exec
DELETE FROM tracker.nutrition
WHERE SUBMITTED_ON = $1
`

func (q *Queries) DeleteNutrition(ctx context.Context, submittedOn string) error {
	_, err := q.db.ExecContext(ctx, deleteNutrition, submittedOn)
	return err
}

const getNutrition = `-- name: GetNutrition :one
SELECT submitted_on, calories, protein, carbohydrate, fat, micronutrients, cret_ts, updt_ts FROM tracker.nutrition
WHERE SUBMITTED_ON = $1 LIMIT 1
`

func (q *Queries) GetNutrition(ctx context.Context, submittedOn string) (TrackerNutrition, error) {
	row := q.db.QueryRowContext(ctx, getNutrition, submittedOn)
	var i TrackerNutrition
	err := row.Scan(
		&i.SubmittedOn,
		&i.Calories,
		&i.Protein,
		&i.Carbohydrate,
		&i.Fat,
		&i.Micronutrients,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const getNutritionDates = `-- name: GetNutritionDates :many
SELECT SUBMITTED_ON FROM tracker.nutrition
LIMIT $1
`

func (q *Queries) GetNutritionDates(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getNutritionDates, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var submitted_on string
		if err := rows.Scan(&submitted_on); err != nil {
			return nil, err
		}
		items = append(items, submitted_on)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const submitNutrition = `-- name: SubmitNutrition :one
INSERT INTO tracker.nutrition (
  SUBMITTED_ON, CALORIES, PROTEIN, CARBOHYDRATE, FAT
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING submitted_on, calories, protein, carbohydrate, fat, micronutrients, cret_ts, updt_ts
`

type SubmitNutritionParams struct {
	SubmittedOn  string        `json:"submittedOn"`
	Calories     int16         `json:"calories"`
	Protein      sql.NullInt16 `json:"protein"`
	Carbohydrate sql.NullInt16 `json:"carbohydrate"`
	Fat          sql.NullInt16 `json:"fat"`
}

func (q *Queries) SubmitNutrition(ctx context.Context, arg SubmitNutritionParams) (TrackerNutrition, error) {
	row := q.db.QueryRowContext(ctx, submitNutrition,
		arg.SubmittedOn,
		arg.Calories,
		arg.Protein,
		arg.Carbohydrate,
		arg.Fat,
	)
	var i TrackerNutrition
	err := row.Scan(
		&i.SubmittedOn,
		&i.Calories,
		&i.Protein,
		&i.Carbohydrate,
		&i.Fat,
		&i.Micronutrients,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}
