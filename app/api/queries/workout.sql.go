// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: workout.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM tracker.workout
WHERE SUBMITTED_ON = $1
`

func (q *Queries) DeleteWorkout(ctx context.Context, submittedOn time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, submittedOn)
	return err
}

const getWorkoutDetails = `-- name: GetWorkoutDetails :one
SELECT workout_id, submitted_on, exercise, sets, reps, weight, reps_in_reserve, cret_ts, updt_ts FROM tracker.workout
WHERE SUBMITTED_ON = $1 LIMIT 1
`

func (q *Queries) GetWorkoutDetails(ctx context.Context, submittedOn time.Time) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutDetails, submittedOn)
	var i TrackerWorkout
	err := row.Scan(
		&i.WorkoutID,
		&i.SubmittedOn,
		&i.Exercise,
		&i.Sets,
		&i.Reps,
		&i.Weight,
		&i.RepsInReserve,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const submitWorkout = `-- name: SubmitWorkout :one
INSERT INTO tracker.workout (
  EXERCISE, SETS, REPS, WEIGHT, REPS_IN_RESERVE
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING workout_id, submitted_on, exercise, sets, reps, weight, reps_in_reserve, cret_ts, updt_ts
`

type SubmitWorkoutParams struct {
	Exercise      string
	Sets          int16
	Reps          int16
	Weight        int16
	RepsInReserve sql.NullString
}

func (q *Queries) SubmitWorkout(ctx context.Context, arg SubmitWorkoutParams) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, submitWorkout,
		arg.Exercise,
		arg.Sets,
		arg.Reps,
		arg.Weight,
		arg.RepsInReserve,
	)
	var i TrackerWorkout
	err := row.Scan(
		&i.WorkoutID,
		&i.SubmittedOn,
		&i.Exercise,
		&i.Sets,
		&i.Reps,
		&i.Weight,
		&i.RepsInReserve,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}
