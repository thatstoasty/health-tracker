// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: workout.sql

package api

import (
	"context"
	"database/sql"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO tracker.workout (
  EXERCISE, SETS, REPS, WEIGHT, REPS_IN_RESERVE
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING workout_id, date, exercise, sets, reps, weight, reps_in_reserve, cret_ts, updt_ts
`

type CreateWorkoutParams struct {
	Exercise      sql.NullString
	Sets          interface{}
	Reps          interface{}
	Weight        interface{}
	RepsInReserve sql.NullString
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout,
		arg.Exercise,
		arg.Sets,
		arg.Reps,
		arg.Weight,
		arg.RepsInReserve,
	)
	var i TrackerWorkout
	err := row.Scan(
		&i.WorkoutID,
		&i.Date,
		&i.Exercise,
		&i.Sets,
		&i.Reps,
		&i.Weight,
		&i.RepsInReserve,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM tracker.workout
WHERE DATE = $1
`

func (q *Queries) DeleteWorkout(ctx context.Context, date sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, date)
	return err
}

const getWorkout = `-- name: GetWorkout :one
SELECT workout_id, date, exercise, sets, reps, weight, reps_in_reserve, cret_ts, updt_ts FROM tracker.workout
WHERE DATE = $1 LIMIT 1
`

func (q *Queries) GetWorkout(ctx context.Context, date sql.NullTime) (TrackerWorkout, error) {
	row := q.db.QueryRowContext(ctx, getWorkout, date)
	var i TrackerWorkout
	err := row.Scan(
		&i.WorkoutID,
		&i.Date,
		&i.Exercise,
		&i.Sets,
		&i.Reps,
		&i.Weight,
		&i.RepsInReserve,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}
