// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: nutrition.sql

package api

import (
	"context"
	"database/sql"
)

const createNutrition = `-- name: CreateNutrition :one
INSERT INTO tracker.nutrition (
  CALORIES, PROTEIN, CARBOHYDRATE, FAT
) VALUES (
  $1, $2, $3, $4
)
RETURNING date, calories, protein, carbohydrate, fat, micronutrients, cret_ts, updt_ts
`

type CreateNutritionParams struct {
	Calories     int16
	Protein      sql.NullInt16
	Carbohydrate sql.NullInt16
	Fat          sql.NullInt16
}

func (q *Queries) CreateNutrition(ctx context.Context, arg CreateNutritionParams) (TrackerNutrition, error) {
	row := q.db.QueryRowContext(ctx, createNutrition,
		arg.Calories,
		arg.Protein,
		arg.Carbohydrate,
		arg.Fat,
	)
	var i TrackerNutrition
	err := row.Scan(
		&i.Date,
		&i.Calories,
		&i.Protein,
		&i.Carbohydrate,
		&i.Fat,
		&i.Micronutrients,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}

const deleteNutrition = `-- name: DeleteNutrition :exec
DELETE FROM tracker.nutrition
WHERE DATE = $1
`

func (q *Queries) DeleteNutrition(ctx context.Context, date sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteNutrition, date)
	return err
}

const getNutrition = `-- name: GetNutrition :one
SELECT date, calories, protein, carbohydrate, fat, micronutrients, cret_ts, updt_ts FROM tracker.nutrition
WHERE DATE = $1 LIMIT 1
`

func (q *Queries) GetNutrition(ctx context.Context, date sql.NullTime) (TrackerNutrition, error) {
	row := q.db.QueryRowContext(ctx, getNutrition, date)
	var i TrackerNutrition
	err := row.Scan(
		&i.Date,
		&i.Calories,
		&i.Protein,
		&i.Carbohydrate,
		&i.Fat,
		&i.Micronutrients,
		&i.CretTs,
		&i.UpdtTs,
	)
	return i, err
}
